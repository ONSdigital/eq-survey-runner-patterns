.grid {
  box-sizing: border-box;
  @if $grid-use-letter-spacing-hack {
    letter-spacing: -0.32em;
  }
  @else {
    font-size: 0;
  }

  margin-left: -$grid-gutters;
}

.grid--float {
  letter-spacing: 0;
}

.grid--center {
  text-align: center;
  .grid__col {
    text-align: left;
  }
}

.grid--center-all {
  text-align: center;
}

.grid--reverse {
  direction: rtl;
  .grid__col {
    direction: ltr;
  }
}

.grid--spaced {
  .grid__col {
    margin-bottom: $grid-gutters;
  }
  &.grid--tight {
    .grid__col {
      margin-bottom: $grid-gutters/2;
    }
  }
}

.grid--align-mid {
  .grid__col {
    vertical-align: middle;
  }
}

.grid--stagger-align {
  .grid__col:nth-of-type(1n) {
    text-align: right;
  }
  .grid__col:nth-of-type(2n) {
    text-align: left;
  }
}

.grid--tight {
  margin-left: -$grid-gutters/2;
  .grid__col {
    padding-left: $grid-gutters/2;
  }
}

.grid--gutterless {
  margin-left: 0;
  .grid__col {
    padding-left: 0;
  }
}

.grid--pixelgutter {
  margin-left: 1px;
  .grid__col {
    padding-left: 1px;
    margin-bottom: 1px;
  }
}

.grid--flex {
  flex-flow: row wrap;
  display: flex;

  &.grid--center {
    justify-content: center;
  }

  &.grid--between {
    justify-content: space-between;
  }

  &.grid--vertical-center {
    align-items: center;
  }

  .grid__col {
    flex: 0 0 auto;
    // Fixes text overflow issues
    min-width: 0;

    &--flex {
      display: flex;
    }
  }
}

@include bp-suffix(grid--no-wrap) {
  flex-wrap: nowrap;
}

@include bp-suffix(grid--bordered, false) {
  margin-left: 0;
  .grid__col {
    padding-top: 1rem;
    padding-bottom: 1rem;
    border-top: 1px solid $color-borders;
    border-bottom: 1px solid $color-borders;
    flex: 1 1 auto;
    &:first-of-type {
      border-right: 1px solid $color-borders;
      padding-left: 0;
    }
  }
}

.grid__col {
  display: inline-block;
  width: 100%;
  vertical-align: top;
  box-sizing: border-box;
  background-clip: content-box;
  @if $grid-use-letter-spacing-hack {
    letter-spacing: normal;
    word-spacing: normal;
  }
  @else {
    font-size: $base-font-size;
  }

  padding-left: $grid-gutters;
  .grid--float & {
    float: left;
    display: block;
  }

  .grid--flex & {
    width: auto;
  }
}

@for $column from 1 through $grid-cols {
  $width: percentage($column / $grid-cols);

  @include bp-suffix(col-#{$column}) {
    width: $width;

    .grid--flex & {
      flex: 0 0 $width;
      max-width: $width;
    }
  }

  @include bp-suffix(push-#{$column}) {
    position: relative;
    left: $width;
  }

  @include bp-suffix(pull-#{$column}) {
    position: relative;
    left: 0 - $width;
  }
}

@include bp-suffix(col-auto) {
  width: auto;

  .grid--flex & {
    flex-basis: auto;
    max-width: 100%;
  }
}

.grid--flex {
  @include bp-suffix(col-shrink) {
    flex-shrink: 1;
  }

  @include bp-suffix(col-no-shrink) {
    flex-shrink: 0;
  }

  @include bp-suffix(col-grow) {
    flex-grow: 1;
  }

  @include bp-suffix(col-no-grow) {
    flex-grow: 0;
  }
}

@include bp-suffix("nopull-", false) {
  left: 0;
}

@include bp-suffix("nopush-", false) {
  left: 0;
}

.bp-helper {
  font-family: "Consolas", "Lucida Grande", sans-serif;
  font-size: 0.8rem;
  position: fixed;
  bottom: 0;
  right: 0;
  display: block;
  z-index: 999999;
  width: auto;
  padding: 1px 10px;
  background: white;
  opacity: 0.8;
  text-align: center;

  &::before {
    display: inline-block;
    color: $color-text;
  }

  @each $breakpoint, $size in $grid-bp {
    @include mq($breakpoint) {
      $width: get-bp-width($breakpoint);
      &::before {
        content: "#{$breakpoint} â‰¥ #{$width}";
      }
    }
  }
}

.grid__helper {
  background: #eee;
  text-align: left;
  font-size: 0.8rem;
  padding: $grid-gutters / 2;
  margin-bottom: $grid-gutters;
  .grid--tight & {
    margin-bottom: $grid-gutters / 2;
  }
  .grid--spaced &,
  .grid--gutterless &,
  .grid--pixelgutter & {
    margin-bottom: 0;
  }
}
